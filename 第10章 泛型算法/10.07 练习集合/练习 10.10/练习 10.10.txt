泛型算法的一大优点是“泛型”，也就是一个算法可用于多种不同的数据类型，算法和所操作的数据结构分离。这对于编程效率的提高是非常巨大的。
要做到算法和数据结构分离。重要的技术手段就是使用迭代器作为二者的桥梁。算法从不操作具体的容器，从而也就不存在与特定容器绑定，不适用于其他容器的问题。算法只操作迭代器，由迭代器真正实现对容器的访问。不同容器实现自己特定的迭代器（但不同迭代器是相容的），算法操作不同迭代器就实现了对不同容器的访问。
因此，并不是算法应该改变或不该改变容器的问题。为了实现与数据结构的分离，为了实现通用性，算法根本就不该知道容器的存在。算法访问数据的唯一通道是迭代器。是否改变容器大小，完全是迭代器的选择和责任。比如在修改后的练习10.7(b)中，当我们向fill_n传递back_inserter时，虽然最终效果是向容器中添加了新的元素，但对于fill_n来说，根本不知道这回事。它仍然像往常一样（通过迭代器）向元素赋予新值，只不过正确做法是通过back_inserter来赋值，而back_inserter选择将新值添加到容器中去而已。