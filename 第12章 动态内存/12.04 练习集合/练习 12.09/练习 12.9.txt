对于普通指针部分，首先分配了两个int型对象，指针分别保存在q和r中。接下来将指针q的值赋予了r，这带来了两个非常严重的内存管理问题：一是直接的内存泄漏问题，r和q都指向了42的内存地址，而r中原来保存100的内存地址再无指针管理，变成了“孤儿内存”，从而造成内存泄漏；其次是“空悬指针”问题，由于r和q指向了同一个动态对象，如果程序编写不当，很容易产生释放了其中一个指针，而继续使用另一个指针的问题。继续使用的指针指向的是一个已经释放的内存，是一个空悬指针，继续读写它指向的内存可能导致程序崩溃甚至系统崩溃的严重问题。
而shared_ptr则不必担心这些问题。首先，分配了两个共享的对象，分别由共享指针p2和q2指向，因此它们的引用计数均为1。接下来，将q2赋予r2。赋值操作会将q2指向的对象地址赋予r2，并将r2原来指向的对象指向的引用计数-1，将q2指向的对象的引用计数+1。这样，前者（r2原来指向的对象）的引用计数变为0，其占用的内存空间被释放，不会造成内存泄漏。而后者（q2原来指向的对象）的引用计数变为2，也不会因为r2和q2之一的销毁而释放其内存空间，因此也不会造成空悬指针的问题。