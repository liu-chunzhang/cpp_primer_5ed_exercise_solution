循环中未对iter进行递增操作，iter无法向中点推进，循环不能及时停止；其次，即使加入了++iter语句，由于向iv插入元素后，iter已经失效，++iter也不能起到将迭代器向前推进一个元素的作用。修改方法如下：
首先。将insert返回的迭代器赋予iter，这样iter将指向新插入的元素y。insert将y插入到了原来指向的元素x之前的位置，因此，接下来，我们需要进行两次iter++才能使iter推进到x之后的位置。
其次，insert函数也会使迭代器mid失效，因此，只是正确设置iter仍不能令循环在正确的时候结束，我们还需设置mid使之指向iv原来的中央元素。在未插入任何新元素的值之前，此位置是iv.begin() + iv.size() / 2，我们将此时的iv.size()的值记录在变量org_size中。然后在循环过程中统计新插入的元素的个数new_ele，则在任何时候，iv.begin() + org_size / 2 +new_ele都能够正确指向原来的中央元素。
一个正确的函数可参考如下：
    vector<int> ivec{ 1 , 3 , 2 , 3 , 3 , 3 , 3 , 21 , 3 , 55 } ;
    int some_val = 3 , count_num = 0 , halfIvecSize = ivec.size() / 2 ;
    for( vector<int>::iterator iter = ivec.begin() ; iter != ( ivec.begin() + halfIvecSize + count_num ) ; ++iter )
        if( *iter == some_val ){
            iter = ivec.insert( iter , 2 * some_val ) ;
            ++iter , ++count_num ;
        }
其中，halfIvecSize必须在for循环前定义，因为填充元素会导致原来的容器内元素数目发生变化，之后再用ivec.size()获取的数据不同于原来；count_num必须在for循环前定义，因为其记录了发生insert的次数。