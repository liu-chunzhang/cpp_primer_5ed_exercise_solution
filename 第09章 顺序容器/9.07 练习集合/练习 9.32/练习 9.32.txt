一般来说，编译器对于实参求值、向形参传递的处理顺序是由右至左的。这意味着，编译器在编译上述编码时，首先对*iter++求值，传递给insert的第二个形参，此时iter已指向下一个元素，因此传递给insert的第一个参数的迭代器指向的是错误位置，程序执行可能会发生混乱，最终崩溃。
因此，若将代码改为iter = vi.insert( iter++ , *iter ) ;，或是使用由左向右求值，传递参数的编译器，代码是可以运行正确的。当然，这样的代码在逻辑上毫无道理。