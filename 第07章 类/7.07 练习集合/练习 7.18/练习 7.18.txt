封装是指保护类的成员不被随意访问的能力。通过把类的实现细节设置为private即可完成对于类的封装。封装实现了类的接口和实现的分离。
封装有两个重要的优点：一是确保用户代码不会无意破坏封装对象的状态；二是被封装的类的具体实现细节可以随时改变，而无须调整用户级别的代码。
一旦把数据成员定义成private的，类的作者就可以比较自由地修改数据了。当实现部分发生改变时，只需要检查类的代码本身以确认这次改变有什么影响（只要类的接口不变），用户代码就无须改变；如果数据是public的，则所有使用了原来数据成员的代码都可能失效，这时我们必须定位并重写所有依赖于老版本的代码，之后才能重新使用该程序。
把数据成员的访问权限设为private还有另外一个好处，这么做能防止由于用户的原因造成数据被破坏。如果我们发现有程序缺陷破坏了对象的状态，则可以在有限的范围内定位缺陷：因为只有实现部分的代码可能产生这样的错误。因此，将错误的搜索限制在有限范围内将能极大地简化更改问题及修正程序等工作。