(a)检查“ptr是否是空指针或者无效指针且原来ptr所指向的元素是不是0（之后再自增）”。
先判定指针ptr是否为空（或者是无效指针），如果不是，继续判断指针ptr所指的整数是否是非0数。如果非0，则该表达式的最终求值结果为真，否则为假。
此表达式在语法上来讲确实是合法的，但是最后的指针移位操作不见得有意义。如果ptr所指的是整型数组中的某个元素，则ptr可以按照预期移动到下一个元素（或尾后位置）。如果ptr所指的只是一个独立的整型变量，则移动指针操作将产生未定义的结果。
(b)检查“ival是不是0（之后再自增）且ival在自增后是不是0”。
先检查ival的值是否是0，如果非0，继续检查（ival+1）的值是否是0。当且仅当两个值都是非0值，表达式的求值结果为真；否则为假。
如果二元表达式的两个运算对象涉及同一个对象并且改变了其值，则这不是一种良好的写法，应该改写。按照程序的原意，应该改写为
ival && (ival+1)
(c)检查“vec[ival]是否小于等于vec[ival + 1]”。
比较vec[ival]和vec[ival + 1]的大小，如果前者较小则求值结果为真，否则为假。与式(b)类似，本式也出现了二元运算符的两个运算对象涉及同一个对象并改变对象值得情况，应该改写为
vec[ival] <= vec[ival + 1].