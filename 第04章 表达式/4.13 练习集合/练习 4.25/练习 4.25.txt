在位运算符中，运算符~的优先级高于<<，因此先对q按位求反，因为位运算符的运算对象应该是整数类型，所以字符'q'首先转换为整数类型。
如题所示，char占8位而int占32位，所以字符'q'转换后得到00000000 00000000 00000000 01110001，按位求反得到11111111 11111111 11111111 10001110；接着进行移位操作，得到11111111 11111111 11100011 10000000。
C++规定整数按照其补码形式存储，对上式求补，得到10000000 00000000 00011100 10000000，即最终结果的二进制形式转换成十进制为-7296。
注：有符号数才分原码，反码和补码，无符号数不区分这些（或者说它们都相同）。有符号数分为正数和负数两大类（0归到正数里），对于正数，其原码、反码和补码相同；负数的原码、反码和补码的相互转换规则是：不涉及符号位的情形下，负数的补码是原码取反+1（或者先从右边复制位，直到遇到第一个1，接着取反这个1左边的所有位），反码是直接逐位取反。
比如：-12的原码是10001100，反码是01110011，补码是11110100（计算机上存储补码，操作时也以补码操作）